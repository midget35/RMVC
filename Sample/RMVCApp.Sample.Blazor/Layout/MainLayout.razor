@using RMVCApp.Sample.Core
@using RMVCApp.Sample.Core.Shared
@using System.Diagnostics

@inject IDialogService DialogService
@inherits LayoutComponentBase
@implements IAppShell

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Class="layout-container">
    <!-- App Bar -->
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>

    <!-- Drawer -->
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <!-- Main Content Area -->
    <MudMainContent Class="content-wrapper">
        <!-- Main Scrollable Body -->
        <div class="main-content">
            @Body
        </div>

        <div class="progress-container">
        <Progress />
    </div>
    </MudMainContent>
</MudLayout>

<!-- Error UI -->
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<!-- Styles -->
<style>
    /* Make layout fill viewport */
    .layout-container {
        display: flex;
        flex-direction: column;
        height: 100vh; /* Full height of the viewport */
        overflow: hidden;
    }

    /* Respect drawer width dynamically */
    .content-wrapper {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        height: 100%; /* Fill height minus app bar */
        padding-left: var(--mud-drawer-width); /* Respect dynamic drawer width */
        transition: padding-left 0.3s; /* Smooth drawer toggle animation */
    }

    /* Scrollable content area */
    .main-content {
        flex-grow: 1; /* Take up remaining height */
        overflow-y: auto; /* Enable scrolling */
        padding: 16px; /* Padding for spacing */
    }

    /* Progress placeholder at bottom, inside content */
    .progress-container {
        height: 160px; /* Fixed height */
        width: 100%; /* Full width */
        
        flex-shrink: 0; /* Prevent shrinking */
    }

</style>

@code {

    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized() {
        Context.Create(typeof(Context), this);
        base.OnInitialized();

        _theme = new() {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
    }
    public void ShowView(Enums.ViewEnum viewEnum) {

    }
    public void SetAppEnabled(bool doEnable) {

    }

    public async Task<bool> ShowMessageBox(string title, string message, bool isYesNo = false) {
        bool? result = await DialogService.ShowMessageBox(
            title,
            message,
            yesText: isYesNo ? "Yes" : "OK",
            noText: isYesNo ? "No" : null
        );

        return result ?? false;
    }

    public void Dispose() {
    }

    private void DrawerToggle() {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle() {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new() {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new() {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}
